package org.economicsl.settlement

import java.util.UUID

import org.economicsl.settlement.contracts.SpotContract

import scala.util.Try


/** Base trait for all settlement services.
  *
  * @author davidrpugh
  * @since 0.1.0
  */
trait SettlementService[S <: SettlementService[S]] {

  def settle(contract: SpotContract): Try[(S, Block)]

  /** Immutable history of all transactions generated by settling contracts. */
  def blockChain: Stream[Block]

  /** Immutable collection of `SettlementParticipant`. */
  def participants: Map[UUID, SettlementParticipant]

  /** Factory method used to delegate instance creation to sub-classes. */
  protected def withBlock(additional: Stream[Transaction]): S

  /** Factory method used to delegate instance creation to sub-classes. */
  protected def withParticipant(additional: SettlementParticipant): S

}

